query dxIntlPlayers($userId: String) {
  dx_intl_players(where: {user_id: {_eq: $userId}}) {
    id
    nickname
    private
    created_at
    dx_intl_record {
      start
      card_name
      rating
      grade
    }
  }
}
mutation insertDxIntlPlayer($nickname: String, $private: Boolean) {
  insert_dx_intl_players_one(object: {
    nickname: $nickname,
    private: $private
  }) {
    id
  }
}
mutation updateDxIntlPlayer($pk: Int!, $nickname: String, $private: Boolean) {
  update_dx_intl_players_by_pk(
    pk_columns: {id: $pk},
		_set: {
    	nickname: $nickname,
    	private: $private
  	}) {
    id
  }
}
mutation deleteDxIntlPlayer($pk: Int!) {
  delete_dx_intl_players_by_pk(id: $pk) {
    id
  }
}

query dxIntlSongs {
  dx_intl_songs(order_by: [
    {category: asc},
    {order: asc}
  ]) {
    category
    title
    order
    dx_intl_variants(order_by: {deluxe: asc}) {
      deluxe
      version
      active
      dx_intl_notes {
        id
        difficulty
        level
      }
    }
  }
}
query dxIntlRecordWithScores($nickname: String!) {
  dx_intl_records(where: {dx_intl_player: {nickname: {_eq: $nickname}}}) {
    card_name
    title
    trophy
    rating
    max_rating
    grade
    start
  }
  dx_intl_scores(where: {dx_intl_player: {nickname: {_eq: $nickname}}}) {
    note_id
    score
    combo_flag
    sync_flag
    start
  }
}
mutation InsertDxIntlRecordWithScores(
  $record: dx_intl_records_insert_input!,
  $scores: [dx_intl_scores_insert_input!]!,
) {
  insert_dx_intl_records_one(
    object: $record,
    on_conflict: {
      constraint: dx_intl_records_player_id_key,
      update_columns: [card_name, title, trophy, rating, max_rating]
    }
  ) {
    __typename
  }
  insert_dx_intl_scores(
    objects: $scores,
    on_conflict: {
      constraint: dx_intl_scores_player_id_note_id_key,
      update_columns: [score, combo_flag, sync_flag]
    }
  ) {
    affected_rows
  }
}