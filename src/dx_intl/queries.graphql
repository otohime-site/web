query dxIntlPlayers($userId: String!) {
  dx_intl_players(where: { user_id: { _eq: $userId } }) {
    id
    nickname
    private
    created_at
    updated_at
    dx_intl_record {
      card_name
      rating
      grade
      course_rank
      class_rank
    }
  }
}
mutation insertDxIntlPlayer($nickname: String!, $private: Boolean!) {
  insert_dx_intl_players_one(
    object: { nickname: $nickname, private: $private }
  ) {
    id
  }
}
mutation updateDxIntlPlayer($pk: Int!, $nickname: String!, $private: Boolean!) {
  update_dx_intl_players_by_pk(
    pk_columns: { id: $pk }
    _set: { nickname: $nickname, private: $private }
  ) {
    id
  }
}
mutation deleteDxIntlPlayer($pk: Int!) {
  delete_dx_intl_players_by_pk(id: $pk) {
    id
  }
}

fragment dxIntlSongsFields on dx_intl_songs {
  id
  category
  title
  order
  dx_intl_variants(order_by: { deluxe: asc }) {
    deluxe
    version
    active
    dx_intl_notes(order_by: { difficulty: asc }) {
      difficulty
      level
    }
  }
}

query dxIntlSongs {
  dx_intl_songs(order_by: [{ category: asc }, { order: asc }]) {
    ...dxIntlSongsFields
  }
}

query dxIntlSongsById($idLike: String!) {
  dx_intl_songs(
    order_by: [{ category: asc }, { order: asc }]
    where: { id: { _like: $idLike } }
  ) {
    ...dxIntlSongsFields
  }
}

query dxIntlRecordWithScores($nickname: String!) {
  dx_intl_players(where: { nickname: { _eq: $nickname } }) {
    updated_at
    private
    dx_intl_record {
      card_name
      title
      trophy
      rating
      max_rating
      grade
      course_rank
      class_rank
    }
    dx_intl_scores {
      song_id
      deluxe
      difficulty
      score
      combo_flag
      sync_flag
      start
    }
  }
}

query dxIntlPlayersTimelines($nickname: String!) {
  dx_intl_players_timelines(
    where: { player: { nickname: { _eq: $nickname } } }
  ) {
    timelines
  }
}

query dxIntlPlayerWithTimeline($nickname: String!, $time: timestamptz!) {
  beforeRecord: dx_intl_records_with_history(
    where: {
      dx_intl_player: { nickname: { _eq: $nickname } }
      end: { _eq: $time }
    }
  ) {
    card_name
    title
    trophy
    rating
    max_rating
    grade
    course_rank
    class_rank
  }
  afterRecord: dx_intl_records_with_history(
    where: {
      dx_intl_player: { nickname: { _eq: $nickname } }
      start: { _eq: $time }
    }
  ) {
    card_name
    title
    trophy
    rating
    max_rating
    grade
    course_rank
    class_rank
  }
  beforeScores: dx_intl_scores_with_history(
    where: {
      dx_intl_player: { nickname: { _eq: $nickname } }
      end: { _eq: $time }
    }
  ) {
    song_id
    deluxe
    difficulty
    score
    combo_flag
    sync_flag
  }
  afterScores: dx_intl_scores_with_history(
    where: {
      dx_intl_player: { nickname: { _eq: $nickname } }
      start: { _eq: $time }
    }
  ) {
    song_id
    deluxe
    difficulty
    score
    combo_flag
    sync_flag
  }
}

query dxIntlPlayersEditable($userId: String!, $nickname: String!) {
  dx_intl_players(
    where: { user_id: { _eq: $userId }, nickname: { _eq: $nickname } }
  ) {
    id
    nickname
    private
  }
}

mutation InsertDxIntlRecordWithScores(
  $record: dx_intl_records_insert_input!
  $scores: [dx_intl_scores_insert_input!]!
) {
  insert_dx_intl_records_one(
    object: $record
    on_conflict: {
      constraint: dx_intl_records_player_id_key
      update_columns: [card_name, title, trophy, rating, max_rating, grade, course_rank, class_rank]
    }
  ) {
    __typename
  }
  insert_dx_intl_scores(
    objects: $scores
    on_conflict: {
      constraint: dx_intl_scores_player_id_song_id_deluxe_difficulty_key
      update_columns: [score, combo_flag, sync_flag]
    }
  ) {
    affected_rows
  }
}

query dxIntlBaseRating {
  dx_intl_base_rating {
    range
    count
  }
}

query dxIntlScoresStats(
  $songId: String!
  $deluxe: Boolean!
  $difficulty: smallint!
) {
  dx_intl_scores_stats(
    where: {
      song_id: { _eq: $songId }
      deluxe: { _eq: $deluxe }
      difficulty: { _eq: $difficulty }
    }
  ) {
    range
    count
  }
}
